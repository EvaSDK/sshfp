#!/usr/bin/python
#
# dane is a tool to generate and verify HASTLS and TLSA records
# By Paul Wouters <paul@xelerance.com> 
# Copyright 2011 by Xelerance http://www.xelerance.com/
# License: GNU GENERAL PUBLIC LICENSE Version 2
#
# https://datatracker.ietf.org/wg/dane/charter/
# https://datatracker.ietf.org/doc/draft-ietf-dane-protocol/

import sys
import getopt
import base64
import argparse

# We want ldns for AD flag support - maybe we will add libunbound later to not need to depend on
# DNSSEC capable resolver in /etc/resolv.conf
try:
	import ldns
except ImportError:
	print "dane requires the ldns-python sub-package from http://www.nlnetlabs.nl/projects/ldns/"
	print "Fedora: yum install ldns-python"
	print "Debian: apt-get install python-ldns"
	sys.exit()

# crypto stuff to do minimal TLS to get server certs
import ssl, socket

import hashlib

global fmt
global secure
global transport
secure = True
transport = "both"

def create_txt(hostname, pubkey):
	""" Kaminsky / Gilmore type TLS pubkey in TXT RRtype """

def create_hastls(hostname, fallback_default, services):
	""" Creates a HASTLS RRtype """

def create_tlsa(hostname, certtype, reftype):
	global fmt
	global secure
	global transport

	if not (fmt in ( "rfc","draft", "both")):
		fmt = "draft"

	"""Creates a TLSA RRtype"""
	""" get all TLSA/HASTLS/A/AAAA records for hostname """
	# do ldns work, complain if no AD bit
	resolver = ldns.ldns_resolver.new_frm_file("/etc/resolv.conf")
	resolver.set_dnssec(True)
	pkt = resolver.query(hostname, ldns.LDNS_RR_TYPE_ANY, ldns.LDNS_RR_CLASS_IN)
	if pkt.get_rcode() is ldns.LDNS_RCODE_SERVFAIL:
		print "%s lookup failed (server error or dnssec validation failed)"%name
		print "use -cd to bypass dnssec validation - NOT RECOMMENDED!!"
		sys.exit(1)
	if pkt.get_rcode() is ldns.LDNS_RCODE_NXDOMAIN:
		if pkt.ad():
			confidence = "(non-existence proven by DNSSEC)"
		else:
			confidence = ""
		print "%s lookup failed %s"%(hostname,confidence)
	if pkt.get_rcode() is ldns.LDNS_RCODE_NOERROR:
		if not pkt.ad():
			if secure:
				sys.exit("Aborted: dnssec required but DNS lookup was insecure (use --insecure to override)\n")
			else:
				print("Warning: dnssec requested but not available")
	else:
		sys.exit("unknown ldns error, aborted")

	# we now have a valid answer, CNAME's got expanded, so we have one or more A/AAAA records
	ipv4 = pkt.rr_list_by_type(ldns.LDNS_RR_TYPE_A, ldns.LDNS_SECTION_ANSWER)
	ipv6 = pkt.rr_list_by_type(ldns.LDNS_RR_TYPE_AAAA, ldns.LDNS_SECTION_ANSWER)
	drafts = []
	rfcs = []

	if ipv4 and transport is not "ipv6":
		for arecord in ipv4.rrs():
			try:
				a = str(arecord).split()[-1].strip()
				v4TLSA = draft_genTLSA(hostname, a, certtype, reftype)
				if v4TLSA:
					rfcv4TLSA = rfc_genTLSA(hostname, a, certtype, reftype)
					draft =  v4TLSA.strip()
					rfc  =  rfcv4TLSA.strip()
					if draft and not (draft in drafts):
						drafts.append(draft)
						rfcs.append(rfc)
			except:
				pass
	if ipv6 and transport is not "ipv4":
		for aaaarecord in ipv6.rrs():
			try:
				aaaa = str(aaaarecord).split()[-1].strip()
				v6TLSA = draft_genTLSA(hostname, aaaa, certtype, reftype)
				if v6TLSA:
					rfcv6TLSA = rfc_genTLSA(hostname, aaaa, certtype, reftype)
					draft =  v6TLSA.strip()
					rfc  =  rfcv6TLSA.strip()
					if draft and not (draft in drafts):
						drafts.append(draft)
						rfcs.append(rfc)
			except:
				pass
		
	if not fmt == "rfc":
		print "%s"%("\n".join(drafts))
	if not fmt == "draft":
		print "%s"%("\n".join(rfcs))

# return the record
def draft_genTLSA(hostname, address, certtype, reftype):
	# We don't use ssl.get_server_certificate because it does not support IPv6, and it converts DER to PEM, which
	# we would just have to convert back to DER using ssl.PEM_cert_to_DER_cert()
	try:
		conn = socket.create_connection((address, 443))
	except socket.error, msg:
		conn  = None
		print "%s (%s): %s"%(hostname, address,msg)
		return
	try:
		sock = ssl.wrap_socket(conn)
	except ssl.SSLError, msg:
		print "%s (%s): %s"%(hostname, address,msg)
		return
	dercert = sock.getpeercert(True)
	sock.close()
	conn.close()

	if certtype != 1:
		print "Only EE-cert supported right now"
	# octet length is half of the string length
	if reftype == 0:
		cert64 = base64.b64encode(dercert)
		return "_443._tcp.%s. IN TYPE65468 \# %s 0%s0%s%s"%(hostname,len(cert64)+2,certtype,reftype, cert64)

	if reftype == 1:
		# sha256
		data_length = 32
	if reftype == 2:
		# sha512
		data_length = 64
	# certtype and reftype are part of the length
	data_length += 2  
	return "_443._tcp.%s. IN TYPE65468 \# %s 0%s0%s%s"%(hostname,data_length,certtype,reftype, hashCert(reftype,dercert))

def rfc_genTLSA(hostname, address, certtype, reftype):
	try:
		conn = socket.create_connection((address, 443))
	except socket.error, msg:
		# quit silently
		conn = None
		return
	sock = ssl.wrap_socket(conn)
	dercert = sock.getpeercert(True)
	sock.close()
	conn.close()
	if certtype != 1:
		print "Only EE-cert supported right now"
	return "_443._tcp.%s. IN TLSA %s %s %s"%(hostname, certtype, reftype, hashCert(reftype,dercert))

# take PEM encoded EE-cert and DER encode it, then sha256 it
def hashCert(reftype,certblob):
	if reftype == 0:
		return certblob
	elif reftype == 1:
		hashobj = hashlib.sha256()
		hashobj.update(certblob)
	elif reftype == 2:
		hashobj = hashlib.sha512()
		hashobj.update(certblob)
	else:
		return 0
	return hashobj.hexdigest().upper()


def checkExistingTLSA(address):
	""" check if a TLSA record already exists, to compare and notify if update is needed """

def checkExistingHASTLS(address):
	""" check if a HASTLS record already exists, to compare and notify if update is needed """

def main(argv=None):
	global fmt
	global secure
	global transport

	if argv is None:
		argv = sys.argv

	if argv is None:
		main("-h")
		sys.exit()

	# create the parser
	parser = argparse.ArgumentParser(description='Create TLS related DNS records for hosts or an entire zone. Examples:\n   dane www.xelerance.com\n   dane --rfc xelerance.com @ns0.xelerance.net\n')

	# AXFR
	parser.add_argument('-n', '--nameserver', metavar="nameserver", action='append',
		help='nameserver to query')

	parser.add_argument('--axfr', action='store_true',
		help='use AXFR (all A/AAAA records will be scanned)')
	# IETF status related, currently --draft is the default
	parser.add_argument('--draft', action='store_true',help='output in draft private rrtype (65468/65469) format (default)')
	parser.add_argument('--rfc', action='store_true',help='output in rfc (TLSA/HASTLS) rrtype format')
	
	# HASTLS related
	parser.add_argument('--hastls', action='store_true',help='generate HASTLS record')
	parser.add_argument('--service', nargs='+', metavar="<service|port>", action='append',
		help='add service without fallback to insecure')
	parser.add_argument('--fallback', nargs='+', metavar="<service|port>", action='append',
		help='add service with fallback to insecure')

	# TLSA related	
	parser.add_argument('--tlsa', action='store_true',help='generate TLSA record (default:yes)')
	parser.add_argument('--eecert', action='store_true',help='use EEcert for TLSA record (default)')
	parser.add_argument('--cacert', action='store_true',help='use CAcert for TLSA record')
	parser.add_argument('--pubkey', action='store_true',help='use pubkey for TLSA record (not supported yet)')
	parser.add_argument('--txt', action='store_true',help='generate Kaminsky style TXT record (not supported yet)')
	parser.add_argument('--sha256', action='store_true',help='use SHA256 for the TLSA cert type')
	parser.add_argument('--sha512', action='store_true',help='use SHA512 for the TLSA cert type')
	parser.add_argument('--full', action='store_true',help='use full certificate for the TLSA cert type')

	# allow non-dnssec answers
	parser.add_argument('--insecure', action='store_true',help='allow use of non-dnssec answers to find SSL hosts')

	# limit networking to ipv4 or ipv6 only
	parser.add_argument('-4', dest='ipv4', action='store_true',help='use ipv4 networking only')
	parser.add_argument('-6', dest='ipv6', action='store_true',help='use ipv6 networking only')

	# finally, the host list
	parser.add_argument('hosts', metavar="hostname", nargs='*')

	args = parser.parse_args(argv[1:])

	if not args.rfc:
		args.draft = True

	if args.cacert:
		sys.exit("TLSA CAcert type record not yet supported")
	if args.pubkey:
		sys.exit("TLSA Pubkey type record not yet supported")
	if args.sha512:
		reftype=2
	elif args.full:
		reftype=0
	else:
		reftype=1

	if args.tlsa:
		args.eecert = True

	if args.insecure:
		secure = False

	if args.ipv4 and not args.ipv6:
		transport = "ipv4"
	if args.ipv6 and not args.ipv4:
		transport = "ipv6"

	# filter the non-options arguments for an "@argument" and convert it for the axfr option.
	filterHost= []
	if not args.nameserver:
		args.nameserver = []
	for host in args.hosts:
		if host[0] == "@":
			args.nameserver.append(host[1:])
			args.hosts.remove(host)
			args.axfr=True
	
	#print args

		if args.rfc and args.draft:
			fmt = "both"
		elif args.rfc:
			fmt = "rfc"
		else:
			fmt = "draft"

	for host in args.hosts:
		if args.tlsa:
			print "do TLSA generation for %s"%host
		if args.hastls:
			print "do hastls generation for %s"%host
		if args.txt:
			print "do kaminsky style TLS records for %s"%host
		if args.nameserver:
			print "Use nameserver %s to query DNS records"%args.nameserver
		if args.axfr:
			print "Going to AXFR for %s @%s"%(host,args.nameserver)

		create_tlsa(host,1,reftype)
		
if __name__ == "__main__":
	sys.exit(main())

